buildscript {
    apply from: 'versions.gradle'
    ext {
        versions.kotlin = '1.6.10'
    }
    addRepos(repositories)
    project.ext.set("android_version_code", 1)
    project.ext.set("android_version_name", "00.00.01")

    ext.myAppVersion = [
        "code": 1,
        "name": "00.00.01",
    ]

    ext.buildConfig = [
        'compileSdk': 31,
        'minSdk'    : 26,
        'targetSdk' : 31,
    ]

    repositories {
        google()
        mavenCentral()
        // Used for Accompanist snapshots
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }

    dependencies {
        classpath('com.android.tools.build:gradle:7.0.4')
        classpath("com.google.dagger:hilt-android-gradle-plugin:2.38.1")
        classpath("androidx.navigation:navigation-safe-args-gradle-plugin:2.3.5")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url = uri("https://jitpack.io") }

        // Used for Accompanist snapshots
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url "https://dl.bintray.com/videolan/Android" }
    }
    addRepos(repositories)
}


task clean(type: Delete) {
    delete rootProject.buildDir
}


subprojects {
//    configurations.configureEach {
//        // We forcefully exclude AppCompat + MDC from any transitive dependencies.
//        // This is a Compose app, so there's no need for these
//        exclude group: 'androidx.appcompat'
//        exclude group: 'com.google.android.material', module: 'material'
//    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {

        kotlinOptions {
            // Treat all Kotlin warnings as errors
            allWarningsAsErrors = false

            // Enable experimental coroutines APIs, including Flow
            freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
            freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.FlowPreview"
            freeCompilerArgs += "-Xopt-in=kotlin.Experimental"
            // freeCompilerArgs += "-Xallow-jvm-ir-dependencies"

            // Set JVM target to 1.8
            jvmTarget = "1.8"
        }
    }
}

subprojects {
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
//            freeCompilerArgs += "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi"
//            freeCompilerArgs += "-Xuse-experimental=kotlinx.coroutines.FlowPreview"
            freeCompilerArgs += "-Xuse-experimental=kotlinx.coroutines.InternalCoroutinesApi"
            freeCompilerArgs += "-Xopt-in=kotlin.time.ExperimentalTime"

//            //This declaration is experimental and its usage must be marked with '@kotlinx.coroutines.InternalCoroutinesApi' or '@OptIn(kotlinx.coroutines.InternalCoroutinesApi::class)'
            freeCompilerArgs += "-Xuse-experimental=kotlin.Experimental"
            // freeCompilerArgs += "-Xallow-jvm-ir-dependencies"
        }
    }
}

Object propOrDef(String propertyName, Object defaultValue) {
    def propertyValue = project.properties[propertyName]
    return propertyValue != null ? propertyValue : defaultValue
}

